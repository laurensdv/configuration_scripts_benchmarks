# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'json'

# Parse the json configuration
$settings = {}

if !(ENV['CONFIG_FILE'].nil?) && File.exists?(File.expand_path ENV['CONFIG_FILE'])
    $settings = JSON.parse(File.read(File.expand_path ENV['CONFIG_FILE']))
else
  if File.exists?(File.expand_path "./config-default.json")
    $settings = JSON.parse(File.read(File.expand_path "./config-default.json"))
  end
end

def provision_server (config, endpt)
  config.vm.define endpt['name'] do |instance|
    instance.vm.provider :aws do |aws, override|
      aws.private_ip_address = endpt['ip']
      aws.tags = {
        'Name' => "FedBench endpoint - #{endpt['name']}"
      }
    end

    instance.vm.provision "chef_solo" do |chef|
		  chef.json = {
        :hostname => $settings['hostname'],
        :endpoints => $settings['endpoints'],
			  :endpoint => endpt,
        :virtuoso => $settings['virtuoso'],
        :ldf => $settings['ldf'],
		  }

		  chef.cookbooks_path = "../chef/cookbooks"
      if $settings['virtuoso'].nil? || $settings['virtuoso']['enabled'].nil? || $settings['virtuoso']['enabled']
        chef.add_recipe "fedbench_virtuoso"
      end

      if $settings['ldf'].nil? || $settings['ldf']['enabled'].nil? || $settings['virtuoso']['enabled']
        chef.add_recipe "fedbench_ldf"
      end
    end
  end
end

Vagrant.configure(2) do |config|
	config.omnibus.chef_version = :latest
	config.vm.box = "dummy"
	config.vm.provider :aws do |aws, override|
		aws.access_key_id = ENV['AWS_ACCESS_KEY']
		aws.secret_access_key = ENV['AWS_SECRET_KEY']
#   		aws.session_token = "SESSION TOKEN"
		aws.keypair_name = ENV['SSH_KEYNAME']
		aws.region = "us-east-1"
		aws.block_device_mapping = [{ 'DeviceName' => '/dev/sda1', 'Ebs.VolumeSize' => 160, 'Ebs.VolumeType' => 'gp2' }]
		aws.ebs_optimized = "true"
		aws.security_groups = $settings['security_groups']
		aws.subnet_id = $settings['subnet']
#		aws.elastic_ip = "true"
		aws.associate_public_ip = "true"

#		The following image has already virtuoso installed.
		aws.ami = $settings['ami']

		aws.instance_type = "m3.2xlarge"
		override.ssh.username = "ubuntu"
		override.ssh.private_key_path = ENV['SSH_KEY'] #should not be necessary as aws key is given
	end

	$settings['endpoints'].each { |endpt| provision_server(config, endpt) }
end
